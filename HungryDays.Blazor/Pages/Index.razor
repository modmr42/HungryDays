@page "/{Id:int}"
@using HungryDays.Blazor.Shared.Components
@using HungryDays.Database.Entities
@using HungryDays.Domain.Models
@using HungryDays.Domain.Services

@inject HungryDayService _hungryDayService
@inject HungryItemService _hungryItemService
@inject NavigationManager NavigationManager


@if (_hungryDayEntity != null)
{
	<div class="row">
		<div class="col-1 text-center align-self-center"><i class="far fa-dot-circle"></i></div>
		<div class="col-8 text-break align-self-center">
			<label class="col-form-label fw-bolder">@_hungryDayEntity.Diner</label>
		</div>
		<div class="col-1 align-self-center">
			<a @onclick="() => editDinerModal.Open()">
				<i class="far fa-edit text-warning">
				</i>
			</a>
			<EditForm Model="@_hungryDayEntity" OnSubmit="@EditDiner">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<Modal @ref="editDinerModal">
					<Title>Edit diner</Title>
					<Body>
						<label class="form-label">Title</label>
						<InputText class="form-control form-control" type="text" @bind-Value="_hungryDayEntity.Diner" />
					</Body>
					<Footer>
						<button class="btn btn-light" type="button" @onclick="() => editDinerModal.Close()">Close</button>
						<button class="btn btn-primary" type="submit" @onclick="() => editDinerModal.Close()">Save</button>
					</Footer>
				</Modal>
			</EditForm>
		</div>
		<div class="col-1 text-center align-self-center">
			<a  @onclick="() => DeleteDay()"><i class="far fa-trash-alt text-danger"></i></a> </div>
	</div>
	<hr />
	<div class="row justify-content-end mb-3">
		<div class="col-12">
			
			<EditForm Model="@_hungryItemEntity" OnSubmit="@AddItem">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<Modal @ref="createItemModal">
					<Title>Create Item</Title>
					<Body>
						<label class="form-label">Name</label>
						<InputText class="form-control" type="text" @bind-Value="_hungryItemEntity.Name" />
						<label class="form-label">Amount</label>
						@*<InputRange Min="0" Max="10" Step="1" @bind-Value="_hungryItemEntity.Quantity" />*@
						<InputNumber class="form-control" @bind-Value="_hungryItemEntity.Quantity" />
						<label class="form-label">Store</label>
						<select class="form-select form-select">
							<option value="Ah">Albert heijn</option>
						</select>
						<div class="form-check mt-4">
							<InputCheckbox class="form-check-input" type="checkbox" @bind-Value="_hungryItemEntity.Bought" />
							<label class="form-check-label" for="formCheck-1">Bought</label>
						</div>
					</Body>
					<Footer>
						<button class="btn btn-light" type="button"  @onclick="() => createItemModal.Close()">Close</button>
						<button class="btn btn-primary" type="submit"  @onclick="() => createItemModal.Close()">Save</button>
					</Footer>
				</Modal>
			</EditForm>
		</div>
	</div>
		@foreach (var _hungryItemEntity in _hungryDayEntity.HungryItems)
		{
			<div class="row mt-2" style="box-shadow: 0px 0px 6px 0px;">
				<div class="col-1 align-self-center">
					<input type="checkbox" @bind="_hungryItemEntity.Bought" @onclick="async () => await ItemCheckChanged(_hungryItemEntity)"/> 
				</div>
				<div class="col-3 align-self-center">
					<label class="col-form-label">@_hungryItemEntity.Name</label>
				</div>
				<div class="col-1 align-self-center">
					<label class="col-form-label fw-bold">@_hungryItemEntity.Quantity x</label>
				</div>
				<div class="col-3 align-self-center">
					<label class="col-form-label">@_hungryItemEntity.Store.ToString()</label>
				</div>
				<div class="col-1 offset-1 align-self-center">
					<a @onclick="() => editItemModal.Open()"><i class="far fa-edit text-warning"></i></a>
					<EditForm Model="@_hungryDayEntity" OnSubmit="@EditItem">
						<DataAnnotationsValidator />
						<ValidationSummary />
						<Modal @ref="editItemModal">
							<Title>Create Item</Title>
							<Body>
								<label class="form-label">Name</label>
								<InputText class="form-control" type="text" @bind-Value="_hungryItemEntity.Name" />
								<label class="form-label">Amount</label>
								<InputNumber class="form-control" @bind-Value="_hungryItemEntity.Quantity" />
								<label class="form-label">Store</label>
								<select class="form-select form-select">
									<option value="Ah">Albert heijn</option>
								</select>
								<div class="form-check mt-4">
									<InputCheckbox class="form-check-input" type="checkbox" @bind-Value="_hungryItemEntity.Bought" />
									<label class="form-check-label" for="formCheck-1">Bought</label>
								</div>
							</Body>
							<Footer>
								<button class="btn btn-light" type="button"  @onclick="() => editItemModal.Close()">Close</button>
								<button class="btn btn-primary" type="submit"@onclick="() => editItemModal.Close()">Save</button>
							</Footer>
						</Modal>
					</EditForm>
				</div>
				<div class="col-1 text-center align-self-center">
					<a @onclick="() => DeleteItem(_hungryItemEntity)"><i class="far fa-trash-alt text-danger"></i></a>
				</div>
			</div>
		}
		<hr />
		<div class="row mt-2">
			<div class="col-12">
				<button class="btn btn-success w-100" @onclick="() => createItemModal.Open()">+</button>
			</div>
		</div>


}
@code {
	private Modal editDinerModal { get; set; }
	private Modal deleteDayModal { get; set; }
	private Modal createItemModal { get; set; }
	private Modal editItemModal { get; set; }
	private Modal deleteItemModal { get; set; }


	public HungryDayEntity? _hungryDayEntity;

	public HungryItemEntity? _hungryItemEntity;

	[Parameter]
	public int Id { get; set; } = 1;

	//protected override void OnInitialized()
	//{
	//	hungryDay = _hungryRepostiory.GetHungryDay(Id);
	//	hungryItem = new Item();
	//}

	protected override async Task OnParametersSetAsync()
	{
		base.OnParametersSet();

		_hungryDayEntity = await _hungryDayService.Get(Id);
		_hungryItemEntity = new HungryItemEntity();
	}

	private async Task AddItem()
	{
		_hungryItemEntity.HungryDay = _hungryDayEntity;
		_hungryItemEntity.HungryDayID = _hungryDayEntity.Id;


		_hungryDayEntity.HungryItems.Add(this._hungryItemEntity);
		await _hungryItemService.Add(_hungryItemEntity);
		this._hungryItemEntity = new HungryItemEntity();
	}

	private async Task EditDiner()
	{
		await _hungryDayService.Update(_hungryDayEntity);
		_hungryDayEntity = await _hungryDayService.Get(_hungryDayEntity.Id); //refresh
	}

	private async Task EditItem()
	{
		await _hungryDayService.Update(_hungryDayEntity);
		_hungryDayEntity = await _hungryDayService.Get(_hungryDayEntity.Id); //refresh
	}

	private async Task DeleteItem(HungryItemEntity hungryItem)
	{
		await _hungryItemService.Delete(hungryItem.Id);
	}

	private async Task DeleteDay()
	{
		await _hungryDayService.Reset(Id);
		_hungryDayEntity = await _hungryDayService.Get(Id); //refresh
	}

	private async Task ItemCheckChanged(HungryItemEntity hungryItem)
	{
		hungryItem.Bought = true;
		await _hungryItemService.Update(hungryItem);
		_hungryDayEntity = await _hungryDayService.Get(_hungryDayEntity.Id);
	}

}

